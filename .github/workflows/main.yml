name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Add permissions for security scanning
permissions:
  security-events: write
  actions: read
  contents: read

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ialbertine/backend
  FRONTEND_IMAGE: ialbertine/frontend

jobs:
  # ===== SECURITY SCANNING =====
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Display Trivy scan results
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "Trivy scan completed successfully"
          echo "Results saved to trivy-results.sarif"
        else
          echo "Trivy scan completed - no SARIF file generated"
        fi



  # ===== BACKEND CI =====
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run tests with coverage
      run: npm test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        directory: ./backend/coverage
        flags: backend

  # ===== FRONTEND CI =====
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Build application
      run: npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        directory: ./frontend/coverage
        flags: frontend

  # ===== CONTAINER SECURITY =====
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: ${{ env.BACKEND_IMAGE }}:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: ${{ env.FRONTEND_IMAGE }}:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner on backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.BACKEND_IMAGE }}:security-scan'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Run Trivy vulnerability scanner on frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.FRONTEND_IMAGE }}:security-scan'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Display container scan results
      run: |
        echo "Container security scan completed"
        if [ -f "trivy-backend-results.sarif" ]; then
          echo "Backend scan results saved to trivy-backend-results.sarif"
        else
          echo "Backend scan completed - no SARIF file generated"
        fi
        if [ -f "trivy-frontend-results.sarif" ]; then
          echo "Frontend scan results saved to trivy-frontend-results.sarif"
        else
          echo "Frontend scan completed - no SARIF file generated"
        fi


  # ===== DEPLOYMENT =====
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, backend-ci, frontend-ci, container-security]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:${{ github.sha }},${{ env.BACKEND_IMAGE }}:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:${{ github.sha }},${{ env.FRONTEND_IMAGE }}:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push monitoring dashboard image
      uses: docker/build-push-action@v5
      with:
        context: ./monitoring
        push: true
        tags: ialbertine/monitoring:latest,ialbertine/monitoring:${{ github.sha }},ialbertine/monitoring:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Login to Azure
      uses: azure/login@v1
      if: github.ref == 'refs/heads/main'
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Configure Backend Environment
      uses: azure/appservice-settings@v1
      if: github.ref == 'refs/heads/main'
      with:
        app-name: ${{ secrets.AZURE_BACKEND_WEBAPP_NAME }}
        app-settings-json: |
          [
            {
              "name": "MONGODB_URI",
              "value": "${{ secrets.MONGODB_URI }}",
              "slotSetting": false
            },
            {
              "name": "NODE_ENV",
              "value": "production",
              "slotSetting": false
            },
            {
              "name": "FRONTEND_URL",
              "value": "https://${{ secrets.AZURE_FRONTEND_WEBAPP_NAME }}.azurewebsites.net",
              "slotSetting": false
            },
            {
              "name": "DEPLOYMENT_VERSION",
              "value": "${{ github.sha }}",
              "slotSetting": false
            }
          ]
    
    - name: Deploy Backend to Azure Web App
      uses: azure/webapps-deploy@v2
      if: github.ref == 'refs/heads/main'
      with:
        app-name: ${{ secrets.AZURE_BACKEND_WEBAPP_NAME }}
        images: '${{ env.BACKEND_IMAGE }}:latest'
        resource-group-name: ${{ secrets.AZURE_RESOURCE_GROUP }}
    
    - name: Deploy Frontend to Azure Web App
      uses: azure/webapps-deploy@v2
      if: github.ref == 'refs/heads/main'
      with:
        app-name: ${{ secrets.AZURE_FRONTEND_WEBAPP_NAME }}
        images: '${{ env.FRONTEND_IMAGE }}:latest'
        resource-group-name: ${{ secrets.AZURE_RESOURCE_GROUP }}
    
    - name: Configure Frontend Environment
      uses: azure/appservice-settings@v1
      if: github.ref == 'refs/heads/main'
      with:
        app-name: ${{ secrets.AZURE_FRONTEND_WEBAPP_NAME }}
        app-settings-json: |
          [
            {
              "name": "VITE_API_URL",
              "value": "https://${{ secrets.AZURE_BACKEND_WEBAPP_NAME }}.azurewebsites.net",
              "slotSetting": false
            },
            {
              "name": "DEPLOYMENT_VERSION",
              "value": "${{ github.sha }}",
              "slotSetting": false
            }
          ]
    
    - name: Test Monitoring Integration
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Testing monitoring integration..."
        BACKEND_URL="https://${{ secrets.AZURE_BACKEND_WEBAPP_NAME }}.azurewebsites.net"
        
        # Test health endpoint with timeout and retry
        for i in {1..3}; do
          echo "Attempt $i: Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s --max-time 30 "$BACKEND_URL/api/health" || echo "Connection failed")
          echo "Health check response: $HEALTH_RESPONSE"
          
          # Verify health endpoint returns expected data
          if echo "$HEALTH_RESPONSE" | grep -q "status.*OK"; then
            echo "Health check passed"
            break
          elif [ $i -eq 3 ]; then
            echo "Health check failed after 3 attempts - continuing deployment"
            echo "Note: Health endpoint may not be ready yet or may have different format"
          else
            echo "Health check failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        echo "Monitoring dashboard will be deployed via Terraform"
        echo "Access monitoring dashboard after Terraform deployment"
    
    - name: Deployment Summary
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Production deployment completed successfully!"
          echo "Deployment Version: ${{ github.sha }}"
          echo "Backend: https://${{ secrets.AZURE_BACKEND_WEBAPP_NAME }}.azurewebsites.net"
          echo "Frontend: https://${{ secrets.AZURE_FRONTEND_WEBAPP_NAME }}.azurewebsites.net"
          echo "Monitoring Dashboard: Deploy via Terraform to get URL"
        else
          echo "Development build completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Deployment Version: ${{ github.sha }}"
          echo "Images pushed to Docker Hub with tags: latest, ${{ github.sha }}, ${{ github.ref_name }}"
        fi
        echo "Security scans completed and results uploaded to GitHub Security tab" 
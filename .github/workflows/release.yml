name: Release Management

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.1)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Run tests
        run: npm run test

      - name: Run linting
        run: npm run lint

      - name: Security audit
        run: npm run security:audit

      - name: Update version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            NEW_VERSION="${{ github.event.inputs.version }}"
          else
            # Auto-increment version based on release type
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"
            
            case $RELEASE_TYPE in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              "patch")
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Updating version to: $NEW_VERSION"

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          cd backend && npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          cd ../frontend && npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version

      - name: Update CHANGELOG.md
        run: |
          # Move unreleased changes to new version
          sed -i "s/## \\[Unreleased\\]/## [${{ steps.version.outputs.new_version }}] - $(date +%Y-%m-%d)/" CHANGELOG.md
          
          # Add new unreleased section
          sed -i '/^## \[/i ## [Unreleased]\n\n### Added\n- \n\n### Changed\n- \n\n### Security\n- \n\n' CHANGELOG.md

      - name: Create Release Commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: release version ${{ steps.version.outputs.new_version }}"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release version ${{ steps.version.outputs.new_version }}"

      - name: Push Release
        run: |
          git push origin main
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.version.outputs.new_version }}"
          release_name: "Release ${{ steps.version.outputs.new_version }}"
          body: |
            ## What's Changed
            
            This release includes the following changes:
            
            $(awk '/^## \['${{ steps.version.outputs.new_version }}'\]/,/^## \[/ {if (!/^## \[/) print}' CHANGELOG.md | head -n -1)
            
            ## Installation
            
            ```bash
            git clone https://github.com/${{ github.repository }}.git
            cd BookHub_DevOpsProject
            npm run install:all
            ```
            
            ## Security
            
            This release includes comprehensive security scanning and vulnerability management. See [SECURITY.md](./SECURITY.md) for details.
            
            ## Changelog
            
            For a complete list of changes, see [CHANGELOG.md](./CHANGELOG.md).
          draft: false
          prerelease: false

      - name: Trigger Deployment
        run: |
          echo "Release ${{ steps.version.outputs.new_version }} created successfully!"
          echo "Deployment will be triggered automatically via the CI/CD pipeline." 
name: Staging Deployment Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

permissions:
  security-events: write
  actions: read
  contents: read

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ialbertine/backend
  FRONTEND_IMAGE: ialbertine/frontend
  MONITORING_IMAGE: ialbertine/monitoring
  ENVIRONMENT: staging

jobs:
  # SECURITY SCANNING 
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Display Trivy scan results
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "Trivy scan completed successfully"
          echo "Results saved to trivy-results.sarif"
        else
          echo "Trivy scan completed - no SARIF file generated"
        fi

  # BACKEND CI
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run tests with coverage
      run: npm test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        directory: ./backend/coverage
        flags: backend-staging

  # FRONTEND CI
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Build application
      run: npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        directory: ./frontend/coverage
        flags: frontend-staging

  # CONTAINER SECURITY
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build backend image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: ${{ env.BACKEND_IMAGE }}:staging-scan-${{ github.run_id }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: ${{ env.FRONTEND_IMAGE }}:staging-scan-${{ github.run_id }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner on backend image
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: '${{ env.BACKEND_IMAGE }}:staging-scan-${{ github.run_id }}'
        format: 'sarif'
        output: 'trivy-backend-staging-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
    
    - name: Run Trivy vulnerability scanner on frontend image
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: '${{ env.FRONTEND_IMAGE }}:staging-scan-${{ github.run_id }}'
        format: 'sarif'
        output: 'trivy-frontend-staging-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
    
    - name: Upload Trivy scan results (Backend)
      uses: actions/upload-artifact@v4
      with:
        name: trivy-backend-staging-scan-results
        path: trivy-backend-staging-results.sarif
    
    - name: Upload Trivy scan results (Frontend)
      uses: actions/upload-artifact@v4
      with:
        name: trivy-frontend-staging-scan-results
        path: trivy-frontend-staging-results.sarif
    
    - name: Clean up temporary images
      run: |
        docker rmi ${{ env.BACKEND_IMAGE }}:staging-scan-${{ github.run_id }} || true
        docker rmi ${{ env.FRONTEND_IMAGE }}:staging-scan-${{ github.run_id }} || true
    
    - name: Display container scan results
      run: |
        echo "Staging container security scan completed"
        echo "Note: Scan results are uploaded as artifacts regardless of findings"
        echo "Vulnerabilities will appear in GitHub Security tab"
        rm -f trivy-backend-staging-results.sarif trivy-frontend-staging-results.sarif || true

  # STAGING DEPLOYMENT
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, backend-ci, frontend-ci, container-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy Infrastructure
      run: |
        cd terraform
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Checking if staging.tfvars exists:"
        ls -la staging.tfvars || echo "staging.tfvars not found"
        terraform init
        terraform plan -var-file="staging.tfvars" -out=tfplan
        terraform apply tfplan
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push backend image (staging)
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.BACKEND_IMAGE }}:staging,${{ env.BACKEND_IMAGE }}:staging-${{ github.sha }},${{ env.BACKEND_IMAGE }}:develop
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image (staging)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.FRONTEND_IMAGE }}:staging,${{ env.FRONTEND_IMAGE }}:staging-${{ github.sha }},${{ env.FRONTEND_IMAGE }}:develop
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push monitoring dashboard image (staging)
      uses: docker/build-push-action@v5
      with:
        context: ./monitoring
        push: true
        tags: ${{ env.MONITORING_IMAGE }}:staging,${{ env.MONITORING_IMAGE }}:staging-${{ github.sha }},${{ env.MONITORING_IMAGE }}:develop
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Configure Backend Environment (Staging)
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ secrets.AZURE_STAGING_BACKEND_WEBAPP_NAME }}
        app-settings-json: |
          [
                         {
               "name": "MONGODB_URI",
               "value": "mongodb+srv://Ialbertine250:11w4ZZWqbOiKI3i9@cluster0.txb5n5b.mongodb.net/bookhub?retryWrites=true&w=majority&appName=Cluster0",
               "slotSetting": false
             },
            {
              "name": "NODE_ENV",
              "value": "staging",
              "slotSetting": false
            },
            {
              "name": "FRONTEND_URL",
              "value": "https://${{ secrets.AZURE_STAGING_FRONTEND_WEBAPP_NAME }}.azurewebsites.net",
              "slotSetting": false
            },
            {
              "name": "DEPLOYMENT_VERSION",
              "value": "${{ github.sha }}",
              "slotSetting": false
            },
            {
              "name": "ENVIRONMENT",
              "value": "staging",
              "slotSetting": false
            }
          ]
    
    - name: Deploy Backend to Staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_STAGING_BACKEND_WEBAPP_NAME }}
        images: '${{ env.BACKEND_IMAGE }}:staging'
        resource-group-name: ${{ secrets.AZURE_RESOURCE_GROUP }}
    
    - name: Deploy Frontend to Staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_STAGING_FRONTEND_WEBAPP_NAME }}
        images: '${{ env.FRONTEND_IMAGE }}:staging'
        resource-group-name: ${{ secrets.AZURE_RESOURCE_GROUP }}
    
    - name: Configure Frontend Environment (Staging)
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ secrets.AZURE_STAGING_FRONTEND_WEBAPP_NAME }}
        app-settings-json: |
          [
            {
              "name": "VITE_API_URL",
              "value": "https://${{ secrets.AZURE_STAGING_BACKEND_WEBAPP_NAME }}.azurewebsites.net",
              "slotSetting": false
            },
            {
              "name": "DEPLOYMENT_VERSION",
              "value": "${{ github.sha }}",
              "slotSetting": false
            },
            {
              "name": "VITE_ENVIRONMENT",
              "value": "staging",
              "slotSetting": false
            }
          ]
    
    - name: Deploy Monitoring to Staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_STAGING_MONITORING_WEBAPP_NAME }}
        images: '${{ env.MONITORING_IMAGE }}:staging'
        resource-group-name: ${{ secrets.AZURE_RESOURCE_GROUP }}
    
    - name: Configure Monitoring Environment (Staging)
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ secrets.AZURE_STAGING_MONITORING_WEBAPP_NAME }}
        app-settings-json: |
          [
            {
              "name": "BACKEND_URL",
              "value": "https://${{ secrets.AZURE_STAGING_BACKEND_WEBAPP_NAME }}.azurewebsites.net",
              "slotSetting": false
            },
            {
              "name": "FRONTEND_URL",
              "value": "https://${{ secrets.AZURE_STAGING_FRONTEND_WEBAPP_NAME }}.azurewebsites.net",
              "slotSetting": false
            },
            {
              "name": "ENVIRONMENT",
              "value": "staging",
              "slotSetting": false
            }
          ]